# -*- coding: utf-8 -*-
"""nlp assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p9hV3Z-ooeCQElx_LpNKRFtXTEm2coYn
"""

import pandas as pd
import re
import nltk
import matplotlib.pyplot as plt
import seaborn as sns

from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from wordcloud import WordCloud

# Task 1: Data Preprocessing
# Load the dataset
df = pd.read_csv("/content/TestReviews.csv")
print(df.head()) # print first 5 rows of the dataset

nltk.download("stopwords")
nltk.download("wordnet")

stop_words = set(stopwords.words("english"))
lemmatizer = WordNetLemmatizer()
def clean_text(text):
    text = str(text).lower() # make lowercase
    text = re.sub(r"[^a-z\s]", "", text)  # remove numbers, punctuation, special chars
    tokens = text.split() # split into words
    tokens = [lemmatizer.lemmatize(w) for w in tokens if w not in stop_words]
    return " ".join(tokens)  # join back into string

df["clean_text"] = df["review"].apply(clean_text) # Applies the clean_text function to every row in the review column. and Creates a new column clean_text
print(df.head())

# Task 2: Feature Extraction
X = df["clean_text"]
y = df["class"]
tfidf = TfidfVectorizer(max_features=5000) # converts text into numbers
X_vec = tfidf.fit_transform(X) # dataset for training ML models

# Task 3: Model Building
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Map numeric labels (if dataset has 0/1) to text
label_mapping = {1: "positive", 0: "negative", 2: "neutral"}
y_train = y_train.map(label_mapping)
y_test = y_test.map(label_mapping)

X_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=42)

# Train Decision Tree

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_preds = dt_model.predict(X_test)

# Train Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)

# Task 4: Evaluation (reuse the same function)
def evaluate_model(y_true, y_pred, model_name):
    print(f"\n {model_name} Results")
    print("Accuracy:", accuracy_score(y_true, y_pred))
    print("Precision:", precision_score(y_true, y_pred, average='weighted'))
    print("Recall:", recall_score(y_true, y_pred, average='weighted'))
    print("F1 Score:", f1_score(y_true, y_pred, average='weighted'))
    print("\nClassification Report:\n", classification_report(y_true, y_pred))

    # Adjust labels according to your dataset (binary or multi-class)
    #unique_labels = sorted(set(y_true))
    #cm = confusion_matrix(y_true, y_pred, labels=unique_labels)
    labels = [0, 1]
    cm = confusion_matrix(y_true, y_pred, labels=labels)
    #sns.heatmap(cm, annot=True, fmt='d', cmap="Blues", xticklabels=unique_labels, yticklabels=unique_labels)
    sns.heatmap(cm, annot=True, fmt='d', cmap="Greens", xticklabels=labels, yticklabels=labels)
    plt.title(f"{model_name} - Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# Evaluate both models
evaluate_model(y_test, dt_preds, "Decision Tree")
evaluate_model(y_test, rf_preds, "Random Forest")

# Task 5: Visualization
sns.countplot(x=y)
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment Class")
plt.ylabel("Count")
plt.show()

# Word Cloud for Positive Reviews
pos_text = " ".join(df[df["class"] == 1]["clean_text"])
wordcloud_pos = WordCloud(width=800, height=400, background_color="white").generate(pos_text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud_pos, interpolation="bilinear")
plt.axis("off")
plt.title("Positive Reviews Word Cloud")
plt.show()

# -------------------------------
# Word Cloud for Negative Reviews
neg_text = " ".join(df[df["class"] == 0]["clean_text"])
wordcloud_neg = WordCloud(width=800, height=400, background_color="black", colormap="Reds").generate(neg_text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud_neg, interpolation="bilinear")
plt.axis("off")
plt.title("Negative Reviews Word Cloud")
plt.show()